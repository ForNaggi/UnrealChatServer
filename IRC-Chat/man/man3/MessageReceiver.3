.TH "MessageReceiver" 3 "Version 1.0.0" "ChatMultiServerDoxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MessageReceiver \- 클라이언트 소켓으로부터 들어오는 메시지를 처리하는 클래스입니다\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <MessageReceiver\&.h>\fP
.SS "Public 타입"

.in +1c
.ti -1c
.RI "enum class \fBResult\fP { \fBSUCCESS\fP, \fBFAIL_RECEIVE\fP, \fBFAIL_SEND\fP, \fBCLIENT_QUIT\fP, \fBCLIENT_DISCONNECTED\fP }"
.br
.in -1c
.SS "Public 멤버 함수"

.in +1c
.ti -1c
.RI "\fBMessageReceiver\fP (SOCKET client_socket)"
.br
.RI "주어진 클라이언트 소켓에 대한 \fBMessageReceiver\fP 객체를 생성합니다\&. "
.ti -1c
.RI "\fB~MessageReceiver\fP ()"
.br
.RI "소멸자\&. "
.ti -1c
.RI "\fBMessageReceiver\fP (const \fBMessageReceiver\fP &obj)=delete"
.br
.ti -1c
.RI "\fBMessageReceiver\fP & \fBoperator=\fP (const \fBMessageReceiver\fP &obj)=delete"
.br
.ti -1c
.RI "\fBMessageReceiver\fP (\fBMessageReceiver\fP &&obj)=delete"
.br
.ti -1c
.RI "\fBMessageReceiver\fP & \fBoperator=\fP (\fBMessageReceiver\fP &&obj)=delete"
.br
.ti -1c
.RI "\fBMessageReceiver::Result\fP \fBreceiveMessage\fP ()"
.br
.RI "클라이언트 소켓으로부터 메시지를 수신하고 내부에 저장합니다\&. "
.ti -1c
.RI "const std::string & \fBgetLastMessage\fP () const"
.br
.RI "마지막으로 수신된 메시지를 반환합니다\&. "
.ti -1c
.RI "bool \fBisQuitCommand\fP (const std::string &message) const"
.br
.RI "주어진 메시지가 "quit" 명령인지 확인합니다\&. "
.in -1c
.SS "Private 멤버 함수"

.in +1c
.ti -1c
.RI "void \fBcleanMessage\fP (std::string &message)"
.br
.RI "수신한 메시지 문자열에서 캐리지 리턴/뉴라인 문자를 제거합니다\&. "
.in -1c
.SS "Private 속성"

.in +1c
.ti -1c
.RI "SOCKET \fB_clientSocket\fP"
.br
.RI "통신에 사용하는 클라이언트 소켓\&. "
.ti -1c
.RI "std::string \fB_lastMessage\fP"
.br
.RI "가장 최근에 수신한 메시지\&. "
.in -1c
.SS "정적 Private 속성"

.in +1c
.ti -1c
.RI "static const int \fBBUFFER_SIZE\fP = 1024"
.br
.RI "데이터 수신에 사용하는 버퍼 크기(바이트 단위)\&. "
.in -1c
.SH "상세한 설명"
.PP 
클라이언트 소켓으로부터 들어오는 메시지를 처리하는 클래스입니다\&. 

클라이언트 소켓을 전달받아 객체를 생성합니다\&. 
.br
소켓으로부터 메시지를 수신하여 저장하고, 특별한 명령(예: 종료 요청)이 있는지 확인합니다\&. 
.br
고정 크기 버퍼를 사용하여 수신된 데이터를 처리합니다\&. 
.PP
\fBMessageReceiver\&.h\fP 파일의 \fB27\fP 번째 라인에서 정의되었습니다\&.
.SH "멤버 열거형 문서화"
.PP 
.SS "enum class \fBMessageReceiver::Result\fP\fR [strong]\fP"

.PP
\fB열거형 멤버\fP
.in +1c
.TP
\f(BISUCCESS \fP
메시지 수신에 성공함 
.TP
\f(BIFAIL_RECEIVE \fP
메시지 수신에 실패함(예: recv 오류) 
.TP
\f(BIFAIL_SEND \fP
필요한 응답 전송에 실패함 
.TP
\f(BICLIENT_QUIT \fP
클라이언트가 quit 명령을 보냄 
.TP
\f(BICLIENT_DISCONNECTED \fP
클라이언트 연결이 예기치 않게 끊어짐 
.PP
\fBMessageReceiver\&.h\fP 파일의 \fB35\fP 번째 라인에서 정의되었습니다\&.
.SH "생성자 & 소멸자 문서화"
.PP 
.SS "MessageReceiver::MessageReceiver (SOCKET client_socket)\fR [explicit]\fP"

.PP
주어진 클라이언트 소켓에 대한 \fBMessageReceiver\fP 객체를 생성합니다\&. 
.PP
\fB매개변수\fP
.RS 4
\fI[IN]\fP SOCKET client_socket : 이 수신기가 메시지를 받을 클라이언트 소켓\&. 
.RE
.PP
\fB반환값\fP
.RS 4
없음\&. 
.RE
.PP
\fB주의\fP
.RS 4
SOCKET을 인자로 받는 이 생성자만 사용할 수 있으며, 내부 변수 초기화합니다\&. 
.RE
.PP

.PP
\fBMessageReceiver\&.cpp\fP 파일의 \fB13\fP 번째 라인에서 정의되었습니다\&.
.SS "MessageReceiver::~MessageReceiver ()"

.PP
소멸자\&. 
.PP
\fB반환값\fP
.RS 4
없음\&. 
.RE
.PP
\fB주의\fP
.RS 4
클라이언트 소켓은 외부에서 관리되므로 이 소멸자는 소켓을 닫지 않습니다\&. 
.RE
.PP

.PP
\fBMessageReceiver\&.cpp\fP 파일의 \fB19\fP 번째 라인에서 정의되었습니다\&.
.SS "MessageReceiver::MessageReceiver (const \fBMessageReceiver\fP & obj)\fR [delete]\fP"

.SS "MessageReceiver::MessageReceiver (\fBMessageReceiver\fP && obj)\fR [delete]\fP"

.SH "멤버 함수 문서화"
.PP 
.SS "void MessageReceiver::cleanMessage (std::string & message)\fR [private]\fP"

.PP
수신한 메시지 문자열에서 캐리지 리턴/뉴라인 문자를 제거합니다\&. 
.PP
\fB매개변수\fP
.RS 4
\fI[IN,OUT]\fP std::string& message : 제거할 메시지 문자열\&. 
.RE
.PP
\fB반환값\fP
.RS 4
없음\&. 
.RE
.PP
\fB주의\fP
.RS 4
메시지를 수신한 후 호출되어, 메시지 끝의 개행 문자를 제거합니다\&. 
.RE
.PP

.PP
\fBMessageReceiver\&.cpp\fP 파일의 \fB88\fP 번째 라인에서 정의되었습니다\&.
.SS "const std::string & MessageReceiver::getLastMessage () const"

.PP
마지막으로 수신된 메시지를 반환합니다\&. 
.PP
\fB반환값\fP
.RS 4
const std::string& : 저장된 마지막 메시지 문자열에 대한 참조\&. 
.RE
.PP

.PP
\fBMessageReceiver\&.cpp\fP 파일의 \fB76\fP 번째 라인에서 정의되었습니다\&.
.SS "bool MessageReceiver::isQuitCommand (const std::string & message) const"

.PP
주어진 메시지가 "quit" 명령인지 확인합니다\&. 
.PP
\fB매개변수\fP
.RS 4
\fI[IN]\fP const std::string& message : 검사할 메시지 문자열\&. 
.RE
.PP
\fB반환값\fP
.RS 4
bool : 해당 메시지가 "quit"와 일치하면 true, 아니면 false\&. 
.RE
.PP

.PP
\fBMessageReceiver\&.cpp\fP 파일의 \fB82\fP 번째 라인에서 정의되었습니다\&.
.SS "\fBMessageReceiver\fP & MessageReceiver::operator= (const \fBMessageReceiver\fP & obj)\fR [delete]\fP"

.SS "\fBMessageReceiver\fP & MessageReceiver::operator= (\fBMessageReceiver\fP && obj)\fR [delete]\fP"

.SS "\fBMessageReceiver::Result\fP MessageReceiver::receiveMessage ()"

.PP
클라이언트 소켓으로부터 메시지를 수신하고 내부에 저장합니다\&. 
.PP
\fB반환값\fP
.RS 4
\fBMessageReceiver::Result\fP 수신 동작의 결과 상태 값\&.
.RE
.PP
클라이언트 소켓에서 데이터를 읽어들입니다\&. 
.br
성공 시 해당 데이터를 내부에 저장하여 \fBgetLastMessage()\fP로 접근할 수 있습니다\&.

.PP
\fB주의\fP
.RS 4
.IP "\(bu" 2
메시지가 정상 수신되면 SUCCESS\&.
.IP "\(bu" 2
수신된 메세지가 "quit" 이면 CLIENT_QUIT\&.
.IP "\(bu" 2
오류 발생 시 적절한 상태 값\&. 
.PP
.RE
.PP

.PP
\fBMessageReceiver\&.cpp\fP 파일의 \fB24\fP 번째 라인에서 정의되었습니다\&.
.SH "멤버 데이터 문서화"
.PP 
.SS "SOCKET MessageReceiver::_clientSocket\fR [private]\fP"

.PP
통신에 사용하는 클라이언트 소켓\&. 
.PP
\fBMessageReceiver\&.h\fP 파일의 \fB104\fP 번째 라인에서 정의되었습니다\&.
.SS "std::string MessageReceiver::_lastMessage\fR [private]\fP"

.PP
가장 최근에 수신한 메시지\&. 
.PP
\fBMessageReceiver\&.h\fP 파일의 \fB107\fP 번째 라인에서 정의되었습니다\&.
.SS "const int MessageReceiver::BUFFER_SIZE = 1024\fR [static]\fP, \fR [private]\fP"

.PP
데이터 수신에 사용하는 버퍼 크기(바이트 단위)\&. 
.PP
\fBMessageReceiver\&.h\fP 파일의 \fB110\fP 번째 라인에서 정의되었습니다\&.

.SH "작성자"
.PP 
소스 코드로부터 ChatMultiServerDoxygen를 위해 Doxygen에 의해 자동으로 생성됨\&.
