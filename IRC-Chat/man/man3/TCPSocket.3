.TH "TCPSocket" 3 "Version 1.0.0" "ChatMultiServerDoxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TCPSocket \- TCP 서버 소켓과 그 기본 동작(생성, 바인드, 연결 대기, 연결 수락, 종료)을 캡슐화합니다\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <TCPSocket\&.h>\fP
.SS "Public 타입"

.in +1c
.ti -1c
.RI "enum class \fBResult\fP { \fBSUCCESS\fP, \fBFAIL_CREATE\fP, \fBFAIL_BIND\fP, \fBFAIL_LISTEN\fP, \fBFAIL_ACCEPT\fP }"
.br
.in -1c
.SS "Public 멤버 함수"

.in +1c
.ti -1c
.RI "\fBTCPSocket\fP ()"
.br
.RI "\fBTCPSocket\fP 객체를 생성하고 소켓 핸들을 INVALID_SOCKET으로 초기화합니다\&. "
.ti -1c
.RI "\fB~TCPSocket\fP ()"
.br
.RI "소멸자입니다\&. 소켓이 열려 있는 경우 해당 소켓을 닫습니다\&. "
.ti -1c
.RI "\fBTCPSocket\fP (const \fBTCPSocket\fP &obj)=delete"
.br
.ti -1c
.RI "\fBTCPSocket\fP & \fBoperator=\fP (const \fBTCPSocket\fP &obj)=delete"
.br
.ti -1c
.RI "\fBTCPSocket\fP (\fBTCPSocket\fP &&obj)=delete"
.br
.ti -1c
.RI "\fBTCPSocket\fP & \fBoperator=\fP (\fBTCPSocket\fP &&obj)=delete"
.br
.ti -1c
.RI "\fBTCPSocket::Result\fP \fBcreateTCPSocket\fP ()"
.br
.RI "새로운 TCP 소켓을 생성합니다\&. "
.ti -1c
.RI "\fBTCPSocket::Result\fP \fBbindTCPSocket\fP (int port) const"
.br
.RI "소켓을 로컬 포트에 바인드하여 연결 요청을 받을 수 있게 합니다\&. "
.ti -1c
.RI "\fBTCPSocket::Result\fP \fBstartListen\fP ()"
.br
.RI "소켓을 수신 대기 모드로 전환하여 들어오는 연결을 받을 수 있게 합니다\&. "
.ti -1c
.RI "SOCKET \fBacceptConnection\fP ()"
.br
.RI "들어오는 클라이언트 연결을 수락합니다\&. "
.ti -1c
.RI "void \fBcloseTCPSocket\fP ()"
.br
.RI "리스닝 소켓을 닫습니다\&. "
.ti -1c
.RI "bool \fBisValid\fP () const"
.br
.RI "소켓이 유효한지 확인합니다\&. "
.ti -1c
.RI "SOCKET \fBgetSocket\fP () const"
.br
.RI "내부 소켓 핸들을 가져옵니다\&. "
.in -1c
.SS "Private 멤버 함수"

.in +1c
.ti -1c
.RI "void \fBlogClientInfo\fP (const sockaddr_in &addr)"
.br
.RI "연결된 클라이언트의 IP 주소와 포트 정보를 로그에 출력합니다\&. "
.in -1c
.SS "Private 속성"

.in +1c
.ti -1c
.RI "SOCKET \fB_tcpSocket\fP"
.br
.RI "TCP 서버 소켓(WinSock 소켓)\&. "
.in -1c
.SH "상세한 설명"
.PP 
TCP 서버 소켓과 그 기본 동작(생성, 바인드, 연결 대기, 연결 수락, 종료)을 캡슐화합니다\&. 

이 클래스는 서버에서 클라이언트의 접속을 받는 리스닝 소켓을 처리하는 데 사용됩니다\&. 
.br
각 단계별 문제를 표시하는 오류 상태 값(Result)을 제공합니다\&. 
.br
TCPSocket을 사용하면 상위 수준의 서버 코드(MultiServer)가 네트워킹을 보다 높은 추상화 수준에서 처리할 수 있습니다\&. 
.PP
\fBTCPSocket\&.h\fP 파일의 \fB26\fP 번째 라인에서 정의되었습니다\&.
.SH "멤버 열거형 문서화"
.PP 
.SS "enum class \fBTCPSocket::Result\fP\fR [strong]\fP"

.PP
\fB열거형 멤버\fP
.in +1c
.TP
\f(BISUCCESS \fP
연산 성공\&. 
.TP
\f(BIFAIL_CREATE \fP
소켓 생성 실패\&. 
.TP
\f(BIFAIL_BIND \fP
소켓 바인드 실패\&. 
.TP
\f(BIFAIL_LISTEN \fP
리스닝 모드 전환 실패\&. 
.TP
\f(BIFAIL_ACCEPT \fP
새 연결 수락 실패\&. 
.PP
\fBTCPSocket\&.h\fP 파일의 \fB33\fP 번째 라인에서 정의되었습니다\&.
.SH "생성자 & 소멸자 문서화"
.PP 
.SS "TCPSocket::TCPSocket ()"

.PP
\fBTCPSocket\fP 객체를 생성하고 소켓 핸들을 INVALID_SOCKET으로 초기화합니다\&. 
.PP
\fB반환값\fP
.RS 4
없음\&.
.RE
.PP
내부 SOCKET을 INVALID_SOCKET으로 설정합니다\&.

.PP
\fB주의\fP
.RS 4
생성 후 실제 소켓을 만들려면 \fBcreateTCPSocket()\fP을 호출해야합니다\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB14\fP 번째 라인에서 정의되었습니다\&.
.SS "TCPSocket::~TCPSocket ()"

.PP
소멸자입니다\&. 소켓이 열려 있는 경우 해당 소켓을 닫습니다\&. 
.PP
\fB반환값\fP
.RS 4
없음\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB19\fP 번째 라인에서 정의되었습니다\&.
.SS "TCPSocket::TCPSocket (const \fBTCPSocket\fP & obj)\fR [delete]\fP"

.SS "TCPSocket::TCPSocket (\fBTCPSocket\fP && obj)\fR [delete]\fP"

.SH "멤버 함수 문서화"
.PP 
.SS "SOCKET TCPSocket::acceptConnection ()"

.PP
들어오는 클라이언트 연결을 수락합니다\&. 
.PP
\fB반환값\fP
.RS 4
SOCKET : 수락된 연결에 대한 새로운 클라이언트 소켓을 반환합니다\&. 
.br
연결이 수락되지 않았거나 오류가 발생한 경우 INVALID_SOCKET을 반환합니다\&.
.RE
.PP
\fB주의\fP
.RS 4
들어오는 연결을 대기합니다\&. (리스닝 소켓에 대해 select()가 읽기 가능 이벤트를 나타낸 후 호출되어야 합니다\&.) 
.br
성공 시 유효한 클라이언트용 SOCKET을 반환하며, 이 소켓은 ClientManager가 관리해야 합니다\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB80\fP 번째 라인에서 정의되었습니다\&.
.SS "\fBTCPSocket::Result\fP TCPSocket::bindTCPSocket (int port) const"

.PP
소켓을 로컬 포트에 바인드하여 연결 요청을 받을 수 있게 합니다\&. 
.PP
\fB매개변수\fP
.RS 4
\fI[IN]\fP int port : 소켓을 바인드할 포트 번호입니다\&. 
.RE
.PP
\fB반환값\fP
.RS 4
\fBTCPSocket::Result\fP : 바인드에 성공하면 SUCCESS, 실패하면 FAIL_BIND를 반환합니다\&.
.RE
.PP
\fB주의\fP
.RS 4
주어진 포트로 모든 네트워크 인터페이스(INADDR_ANY)에 바인드합니다\&. 
.br
이 함수를 호출하기 전에 소켓이 \fBcreateTCPSocket()\fP으로 생성되어 있어야 합니다\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB42\fP 번째 라인에서 정의되었습니다\&.
.SS "void TCPSocket::closeTCPSocket ()"

.PP
리스닝 소켓을 닫습니다\&. 
.PP
\fB반환값\fP
.RS 4
없음\&.
.RE
.PP
\fB주의\fP
.RS 4
서버를 종료하거나 더 이상 연결을 받지 않을 때 이 함수를 호출해야 합니다\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB105\fP 번째 라인에서 정의되었습니다\&.
.SS "\fBTCPSocket::Result\fP TCPSocket::createTCPSocket ()"

.PP
새로운 TCP 소켓을 생성합니다\&. 
.PP
\fB반환값\fP
.RS 4
\fBTCPSocket::Result\fP : 소켓 생성에 성공하면 SUCCESS, 실패하면 FAIL_CREATE를 반환합니다\&.
.RE
.PP
\fB주의\fP
.RS 4
내부적으로 socket(\&.\&.\&.) 함수(winsock API)를 호출합니다\&. 
.br
이 메서드는 바인드나 리스닝을 수행하기 전에 호출되어야 합니다\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB24\fP 번째 라인에서 정의되었습니다\&.
.SS "SOCKET TCPSocket::getSocket () const"

.PP
내부 소켓 핸들을 가져옵니다\&. 
.PP
\fB반환값\fP
.RS 4
SOCKET : 해당 객체가 관리하는 Socket을 반환합니다\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB122\fP 번째 라인에서 정의되었습니다\&.
.SS "bool TCPSocket::isValid () const"

.PP
소켓이 유효한지 확인합니다\&. 
.PP
\fB반환값\fP
.RS 4
bool : 소켓이 유효하여(INVALID_SOCKET이 아닌 경우) true를 반환하고, 생성되지 않았거나 이미 닫힌 경우 false를 반환합니다\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB117\fP 번째 라인에서 정의되었습니다\&.
.SS "void TCPSocket::logClientInfo (const sockaddr_in & addr)\fR [private]\fP"

.PP
연결된 클라이언트의 IP 주소와 포트 정보를 로그에 출력합니다\&. 
.PP
\fB매개변수\fP
.RS 4
\fI[IN]\fP const sockaddr_in& addr : 클라이언트의 주소 정보가 담긴 sockaddr_in 구조체입니다\&. 
.RE
.PP
\fB반환값\fP
.RS 4
없음\&.
.RE
.PP
연결된 클라이언트의 IP 주소와 포트 번호를 출력합니다\&. 
.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB127\fP 번째 라인에서 정의되었습니다\&.
.SS "\fBTCPSocket\fP & TCPSocket::operator= (const \fBTCPSocket\fP & obj)\fR [delete]\fP"

.SS "\fBTCPSocket\fP & TCPSocket::operator= (\fBTCPSocket\fP && obj)\fR [delete]\fP"

.SS "\fBTCPSocket::Result\fP TCPSocket::startListen ()"

.PP
소켓을 수신 대기 모드로 전환하여 들어오는 연결을 받을 수 있게 합니다\&. 
.PP
\fB반환값\fP
.RS 4
\fBTCPSocket::Result\fP : 리스닝을 시작하는 데 성공하면 SUCCESS, 오류가 발생하면 FAIL_LISTEN을 반환합니다\&.
.RE
.PP
\fB주의\fP
.RS 4
이 함수를 호출하기 전에 소켓이 생성되고 바인드되어 있어야 합니다\&. 
.RE
.PP

.PP
\fBTCPSocket\&.cpp\fP 파일의 \fB64\fP 번째 라인에서 정의되었습니다\&.
.SH "멤버 데이터 문서화"
.PP 
.SS "SOCKET TCPSocket::_tcpSocket\fR [private]\fP"

.PP
TCP 서버 소켓(WinSock 소켓)\&. 
.PP
\fBTCPSocket\&.h\fP 파일의 \fB142\fP 번째 라인에서 정의되었습니다\&.

.SH "작성자"
.PP 
소스 코드로부터 ChatMultiServerDoxygen를 위해 Doxygen에 의해 자동으로 생성됨\&.
