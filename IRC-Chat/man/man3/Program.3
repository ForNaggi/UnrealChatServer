.TH "Program" 3 "Version 1.0.0" "ChatMultiServerDoxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Program \- 채팅 서버 프로그램의 시작, 실행 및 종료를 제어합니다\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Program\&.h>\fP
.SS "Public 멤버 함수"

.in +1c
.ti -1c
.RI "\fBProgram\fP ()"
.br
.RI "\fBProgram\fP 객체를 생성하고 하위 구성 요소를 초기화합니다\&. "
.ti -1c
.RI "\fB~Program\fP ()"
.br
.RI "Program의 소멸자\&. "
.ti -1c
.RI "\fBProgram\fP (const \fBProgram\fP &obj)=delete"
.br
.ti -1c
.RI "\fBProgram\fP & \fBoperator=\fP (const \fBProgram\fP &obj)=delete"
.br
.ti -1c
.RI "\fBProgram\fP (\fBProgram\fP &&obj)=delete"
.br
.ti -1c
.RI "\fBProgram\fP & \fBoperator=\fP (\fBProgram\fP &&obj)=delete"
.br
.ti -1c
.RI "int \fBrun\fP ()"
.br
.RI "서버 프로그램을 실행하여 초기화하고, 서버 루프에 진입합니다\&. "
.in -1c
.SS "Private 타입"

.in +1c
.ti -1c
.RI "enum class \fBResult\fP { \fBFAIL\fP, \fBSUCCESS\fP }"
.br
.in -1c
.SS "Private 멤버 함수"

.in +1c
.ti -1c
.RI "\fBProgram::Result\fP \fBinitialize\fP ()"
.br
.RI "프로그램에 필요한 리소스를 초기화합니다 (예: WinSock)\&. "
.ti -1c
.RI "\fBProgram::Result\fP \fBstartMultiServer\fP ()"
.br
.RI "\fBMultiServer\fP 인스턴스를 생성하고 시작합니다\&. "
.ti -1c
.RI "void \fBrunServerLoop\fP ()"
.br
.RI "서버를 계속 실행하며 이벤트에 응답하도록 서버 메인 루프에 진입합니다\&. "
.in -1c
.SS "Private 속성"

.in +1c
.ti -1c
.RI "\fBSocketIniter\fP \fB_socketIniter\fP"
.br
.RI "WinSock(Windows Sockets API)의 초기화와 정리를 담당하는 객체\&. "
.ti -1c
.RI "\fBMultiServer\fP \fB_multiServer\fP"
.br
.RI "클라이언트 연결과 메시지를 처리하는 다중 클라이언트 서버 객체\&. "
.in -1c
.SS "정적 Private 속성"

.in +1c
.ti -1c
.RI "static const int \fBSERVER_PORT\fP = 5500"
.br
.RI "서버가 사용할 TCP 포트 번호 (기본값: 5500)\&. "
.in -1c
.SH "상세한 설명"
.PP 
채팅 서버 프로그램의 시작, 실행 및 종료를 제어합니다\&. 

\fBProgram\fP 클래스는 필요한 하위 시스템(WinSock 초기화 등)을 설정합니다\&. 
.br
MultiServer를 인스턴스화합니다\&. 
.br
서버를 시작하여 메인 루프를 실행하고 서버를 중지하는 순서를 관리합니다\&. 
.br
\fR\fBrun()\fP\fP 메서드를 제공하여 전체 과정을 시작할 수 있습니다\&. 
.PP
\fBProgram\&.h\fP 파일의 \fB29\fP 번째 라인에서 정의되었습니다\&.
.SH "멤버 열거형 문서화"
.PP 
.SS "enum class \fBProgram::Result\fP\fR [strong]\fP, \fR [private]\fP"

.PP
\fB열거형 멤버\fP
.in +1c
.TP
\f(BIFAIL \fP
단계가 실패한 경우 (예: WinSock 초기화 또는 서버 시작 실패)\&. 
.TP
\f(BISUCCESS \fP
단계가 성공적으로 완료된 경우\&. 
.PP
\fBProgram\&.h\fP 파일의 \fB35\fP 번째 라인에서 정의되었습니다\&.
.SH "생성자 & 소멸자 문서화"
.PP 
.SS "Program::Program ()"

.PP
\fBProgram\fP 객체를 생성하고 하위 구성 요소를 초기화합니다\&. 
.PP
\fB반환값\fP
.RS 4
없음\&.
.RE
.PP
\fBSocketIniter\fP(WinSock 초기화 담당)와 MultiServer를 초기화합니다\&. 
.PP
\fBProgram\&.cpp\fP 파일의 \fB14\fP 번째 라인에서 정의되었습니다\&.
.SS "Program::~Program ()"

.PP
Program의 소멸자\&. 
.PP
\fB반환값\fP
.RS 4
없음\&.
.RE
.PP
\fB주의\fP
.RS 4
모든 구성 요소가 올바르게 종료되도록 보장합니다\&. 
.br
소켓 정리는 SocketIniter와 MultiServer의 소멸자에서 처리됩니다\&. 
.RE
.PP

.PP
\fBProgram\&.cpp\fP 파일의 \fB20\fP 번째 라인에서 정의되었습니다\&.
.SS "Program::Program (const \fBProgram\fP & obj)\fR [delete]\fP"

.SS "Program::Program (\fBProgram\fP && obj)\fR [delete]\fP"

.SH "멤버 함수 문서화"
.PP 
.SS "\fBProgram::Result\fP Program::initialize ()\fR [private]\fP"

.PP
프로그램에 필요한 리소스를 초기화합니다 (예: WinSock)\&. 
.PP
\fB반환값\fP
.RS 4
\fBProgram::Result\fP : 초기화에 성공하면 SUCCESS, 실패하면 FAIL\&.
.RE
.PP
\fB주의\fP
.RS 4
WinSock을 시작하기 위해 \fBSocketIniter::init()\fP을 호출합니다\&. 
.br
이 호출이 실패하면 서버를 실행할 수 없습니다\&. 
.RE
.PP

.PP
\fBProgram\&.cpp\fP 파일의 \fB44\fP 번째 라인에서 정의되었습니다\&.
.SS "\fBProgram\fP & Program::operator= (const \fBProgram\fP & obj)\fR [delete]\fP"

.SS "\fBProgram\fP & Program::operator= (\fBProgram\fP && obj)\fR [delete]\fP"

.SS "int Program::run ()"

.PP
서버 프로그램을 실행하여 초기화하고, 서버 루프에 진입합니다\&. 
.PP
\fB반환값\fP
.RS 4
int : 프로그램 종료 상태 값 (정상 종료 시 0, 오류 발생 시 -1)\&.
.RE
.PP
이 메서드는 다음과 같은 주요 단계들을 수행합니다:
.IP "\(bu" 2
\fBinitialize()\fP를 호출하여 네트워킹(WinSock)을 초기화합니다\&.
.IP "\(bu" 2
\fBstartMultiServer()\fP를 호출하여 서버를 시작합니다\&.
.IP "\(bu" 2
서버가 성공적으로 시작되면 \fBrunServerLoop()\fP를 호출하여 서버 루프에 진입하고 클라이언트 상호 작용을 처리합니다\&.
.IP "\(bu" 2
루프가 종료되거나 오류가 발생하면 정수 상태 코드를 반환하고, 이 값은 프로세스 종료 코드로 사용될 수 있습니다\&. 
.PP

.PP
\fBProgram\&.cpp\fP 파일의 \fB25\fP 번째 라인에서 정의되었습니다\&.
.SS "void Program::runServerLoop ()\fR [private]\fP"

.PP
서버를 계속 실행하며 이벤트에 응답하도록 서버 메인 루프에 진입합니다\&. 
.PP
\fB반환값\fP
.RS 4
없음\&.
.RE
.PP
\fBMultiServer::runServerLoop()\fP를 호출하여 클라이언트 연결과 메시지를 처리합니다\&. 
.br
이 함수는 서버 루프가 종료될 때까지(오류 발생 또는 중지 신호 수신 시) loop합니다\&. 
.PP
\fBProgram\&.cpp\fP 파일의 \fB73\fP 번째 라인에서 정의되었습니다\&.
.SS "\fBProgram::Result\fP Program::startMultiServer ()\fR [private]\fP"

.PP
\fBMultiServer\fP 인스턴스를 생성하고 시작합니다\&. 
.PP
\fB반환값\fP
.RS 4
\fBProgram::Result\fP : 서버 시작에 성공하면 SUCCESS, 서버 시작 실패 시 FAIL\&.
.RE
.PP
SERVER_PORT로 MultiServer를 초기화합니다\&. 
.br
\fBMultiServer::startServer()\fP를 호출합니다\&. 
.br
서버가 클라이언트의 접속을 받을 준비를 마칩니다\&. 
.PP
\fBProgram\&.cpp\fP 파일의 \fB60\fP 번째 라인에서 정의되었습니다\&.
.SH "멤버 데이터 문서화"
.PP 
.SS "\fBMultiServer\fP Program::_multiServer\fR [private]\fP"

.PP
클라이언트 연결과 메시지를 처리하는 다중 클라이언트 서버 객체\&. 
.PP
\fBProgram\&.h\fP 파일의 \fB90\fP 번째 라인에서 정의되었습니다\&.
.SS "\fBSocketIniter\fP Program::_socketIniter\fR [private]\fP"

.PP
WinSock(Windows Sockets API)의 초기화와 정리를 담당하는 객체\&. 
.PP
\fBProgram\&.h\fP 파일의 \fB87\fP 번째 라인에서 정의되었습니다\&.
.SS "const int Program::SERVER_PORT = 5500\fR [static]\fP, \fR [private]\fP"

.PP
서버가 사용할 TCP 포트 번호 (기본값: 5500)\&. 
.PP
\fBProgram\&.h\fP 파일의 \fB93\fP 번째 라인에서 정의되었습니다\&.

.SH "작성자"
.PP 
소스 코드로부터 ChatMultiServerDoxygen를 위해 Doxygen에 의해 자동으로 생성됨\&.
